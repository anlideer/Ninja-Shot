//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""643599c9-cbe3-4abe-889b-b87832393cff"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e5fdd4ac-f115-4e44-a360-0047e6ec3f91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14e7b8ce-7db2-4930-9b66-3ded21a9efed"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TargetPosition"",
            ""id"": ""b567b0d1-e96b-4c35-af20-55129f550a06"",
            ""actions"": [
                {
                    ""name"": ""Pos"",
                    ""type"": ""Value"",
                    ""id"": ""5890f54e-8713-4ca8-89a1-a78f96112e61"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb170f2c-b41c-4da4-b527-9e16d08e8616"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Dash = m_Movement.FindAction("Dash", throwIfNotFound: true);
        // TargetPosition
        m_TargetPosition = asset.FindActionMap("TargetPosition", throwIfNotFound: true);
        m_TargetPosition_Pos = m_TargetPosition.FindAction("Pos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Dash;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_Movement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // TargetPosition
    private readonly InputActionMap m_TargetPosition;
    private List<ITargetPositionActions> m_TargetPositionActionsCallbackInterfaces = new List<ITargetPositionActions>();
    private readonly InputAction m_TargetPosition_Pos;
    public struct TargetPositionActions
    {
        private @PlayerControls m_Wrapper;
        public TargetPositionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pos => m_Wrapper.m_TargetPosition_Pos;
        public InputActionMap Get() { return m_Wrapper.m_TargetPosition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TargetPositionActions set) { return set.Get(); }
        public void AddCallbacks(ITargetPositionActions instance)
        {
            if (instance == null || m_Wrapper.m_TargetPositionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TargetPositionActionsCallbackInterfaces.Add(instance);
            @Pos.started += instance.OnPos;
            @Pos.performed += instance.OnPos;
            @Pos.canceled += instance.OnPos;
        }

        private void UnregisterCallbacks(ITargetPositionActions instance)
        {
            @Pos.started -= instance.OnPos;
            @Pos.performed -= instance.OnPos;
            @Pos.canceled -= instance.OnPos;
        }

        public void RemoveCallbacks(ITargetPositionActions instance)
        {
            if (m_Wrapper.m_TargetPositionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITargetPositionActions instance)
        {
            foreach (var item in m_Wrapper.m_TargetPositionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TargetPositionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TargetPositionActions @TargetPosition => new TargetPositionActions(this);
    public interface IMovementActions
    {
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ITargetPositionActions
    {
        void OnPos(InputAction.CallbackContext context);
    }
}
